// Generated by gencpp from file ecam_msg/Encoders.msg
// DO NOT EDIT!


#ifndef ECAM_MSG_MESSAGE_ENCODERS_H
#define ECAM_MSG_MESSAGE_ENCODERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ecam_msg
{
template <class ContainerAllocator>
struct Encoders_
{
  typedef Encoders_<ContainerAllocator> Type;

  Encoders_()
    : front_left(0)
    , front_right(0)
    , rear_left(0)
    , rear_right(0)  {
    }
  Encoders_(const ContainerAllocator& _alloc)
    : front_left(0)
    , front_right(0)
    , rear_left(0)
    , rear_right(0)  {
  (void)_alloc;
    }



   typedef int64_t _front_left_type;
  _front_left_type front_left;

   typedef int64_t _front_right_type;
  _front_right_type front_right;

   typedef int64_t _rear_left_type;
  _rear_left_type rear_left;

   typedef int64_t _rear_right_type;
  _rear_right_type rear_right;





  typedef boost::shared_ptr< ::ecam_msg::Encoders_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ecam_msg::Encoders_<ContainerAllocator> const> ConstPtr;

}; // struct Encoders_

typedef ::ecam_msg::Encoders_<std::allocator<void> > Encoders;

typedef boost::shared_ptr< ::ecam_msg::Encoders > EncodersPtr;
typedef boost::shared_ptr< ::ecam_msg::Encoders const> EncodersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ecam_msg::Encoders_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ecam_msg::Encoders_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ecam_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ecam_msg': ['/home/alex/catkin_ws/src/Eurobot-2018/ros_packages/ecam_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ecam_msg::Encoders_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ecam_msg::Encoders_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ecam_msg::Encoders_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ecam_msg::Encoders_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ecam_msg::Encoders_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ecam_msg::Encoders_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ecam_msg::Encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "189368fd89d1fdc2727ab57efab8cd75";
  }

  static const char* value(const ::ecam_msg::Encoders_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x189368fd89d1fdc2ULL;
  static const uint64_t static_value2 = 0x727ab57efab8cd75ULL;
};

template<class ContainerAllocator>
struct DataType< ::ecam_msg::Encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecam_msg/Encoders";
  }

  static const char* value(const ::ecam_msg::Encoders_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ecam_msg::Encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 front_left\n\
int64 front_right\n\
int64 rear_left\n\
int64 rear_right\n\
";
  }

  static const char* value(const ::ecam_msg::Encoders_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ecam_msg::Encoders_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.front_left);
      stream.next(m.front_right);
      stream.next(m.rear_left);
      stream.next(m.rear_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Encoders_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ecam_msg::Encoders_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ecam_msg::Encoders_<ContainerAllocator>& v)
  {
    s << indent << "front_left: ";
    Printer<int64_t>::stream(s, indent + "  ", v.front_left);
    s << indent << "front_right: ";
    Printer<int64_t>::stream(s, indent + "  ", v.front_right);
    s << indent << "rear_left: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rear_left);
    s << indent << "rear_right: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rear_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ECAM_MSG_MESSAGE_ENCODERS_H
